

<xss:code>
//preconditions
if (!application.canvasElement)
	application.canvasElement = "myCanvas";

if (!application.ui_package)
    application.ui_package = "ui_package";
</xss:code>

<!DOCTYPE html>

<html>

<head>

<title><xss:e value = "application.title"/></title>

<script type="text/javascript" src="js/jquery-1.4.2.min.js" ></script>
<script type="text/javascript" src="js/jquery.utils.js"></script>
<script type="text/javascript" src="js/utils.js"></script>
<script type="text/javascript" src="js/prototype.js"></script>

<script type="text/javascript" src="js/ms/ms-ui.js"></script>
<script type="text/javascript" src="js/ms/ms-streamer.js"></script>
<script type="text/javascript" src="js/ms/ms-state.js"></script>

<script type="text/javascript">			
var g_ui;
var g_elapsed = -1;
var g_delta = 0.0;
var g_canvas;

<xss:instance id="callback">
    method do_constructor(clazz)
    {
        if (clazz.handler == "sequence")
        {
            var seq = clazz;
            var rendering_class = true;
            out() 
            {
                <xss:file output="inline" src="sequence.xss">
                    <parameter name="seq"/>
                    <parameter name="rendering_class"/>
                </xss:file>
            }
        }
    }
</xss:instance>

<xss:code>
//classes
for (var clazz in classes)
{
    if (clazz.native)
    {
        out()
        {
            <xss:file output="inline" src="class.xss">
                <parameter name="clazz"/>
                <parameter name="callback"/>
            </xss:file>
        }
    }
}
</xss:code> 

function default_interpolate(a, b, t)
{
    return a + (b - a)*t;
}

function start(resolution)  
{  
	var start = new Date().getTime();  
	function update()  
	{  
		var now   = new Date().getTime();
        if (g_elapsed < 0)
            g_delta = 0; //first update
        else
		    g_delta  = now - g_elapsed;  
		
        g_elapsed = now; 
              
		var context = g_canvas.getContext('2d');
		g_ui.update(g_delta, context);
        
        update_sequences(g_delta);
              
		window.setTimeout(update, resolution);  
	}  
	window.setTimeout(update, resolution);  
}  

var g_sequences = [];
<xss:marker name="variables"/>

function update_sequences(delta)
{
	for(var i = 0; i < g_sequences.length; i++)
	{
		var seq = g_sequences[i]
		if (seq.running)
        {
            seq.update(delta);
        }
	}
}

window.onload = function() 
{
	var drawingCanvas = document.getElementById("<xss:e value="application.canvasElement"/>");
        
	g_canvas = drawingCanvas;
	if (drawingCanvas && drawingCanvas.getContext)
	{
		var client =
		{
			width: <xss:e value="application.width"/>,
			height: <xss:e value="application.height"/>,
			canvas: drawingCanvas
		};
            
		var streamer = new ms.streamer.Streamer();
		var ui = new ms.ui.Manager(client, streamer);
		var resources = new ms.streamer.PackageContainer();
		g_ui = ui;

		<xss:code>
        
		for(var res in application.resources)
		{
            if (res.id == application.ui_package)
            {
                //this is obviously a hack, but what the hell 
                out()
                {
                    var ui_images = 
                    [
                }
                
                for(var uiImg in res.children)
                {
			        out(indent = 3, trim = true)
			        {
				        '<xss:e value="uiImg.src"/>',
			        }
                }

                out()
                {
                    ];
                }
            }
            else
            {
                //generate a standard resource package
                out(marker = "variables")
                {
                    var <xss:e v="res.id"/>;
                }
                
                //contents
                string pack_id = compiler.genid("__p");
                out()
                {
                    var <xss:e v="pack_id"/> = 
                    [
                }
                
                for(var resource in res.children)
                {
                    out()
                    {
                        {src: "<xss:e v="resource.src"/>"},
                    }
                }
                
                out()
                {
                    ];
                    
                    <xss:e v="res.id"/> = new ms.streamer.Package(streamer, <xss:e v="pack_id"/>);
                    resources.register("<xss:e v="res.id"/>", <xss:e v="res.id"/>);            
                }
                
                if (res.auto_load)
                {
                    out()
                    {
                        <xss:e v="res.id"/>.load();
                    }
                }
                
                
            }
		}
        </xss:code>

		ui.load_images(ui_images, function()
		{
			drawingCanvas.onmousemove = function(ev)
			{
				ui.mouse_move(ev.clientX, ev.clientY);                  
			};

			drawingCanvas.onmousedown = function(ev)
			{
				ui.mouse_down(ev.clientX, ev.clientY);                  
			};

			drawingCanvas.onmouseup = function(ev)
			{
				ui.mouse_up(ev.clientX, ev.clientY);                  
			};


			<xss:class entry_point="generate">
			//We'll do a first pass gathering all renderables
            property variables  = [];
			property sequences  = [];
			property components = [];
            
            method traverse(node, parent)
            {
                string parent_id = "";
                if (parent)
                    parent_id = parent.id;
                    
                bool inspect_children = true;
            
                node.parent = parent;
                if (parent)
                {
                    variables += node.id;
                    
                    if (node.handler == "sequence")    
                    {
                        sequences += node;
                        inspect_children = false; //let the sequences generate themselves
                    }
                    else if (node.handler == "object")      compiler.log("WARNING: Standalone objects has not been implemented");
                    else                                    components += node;        
                }
                else
                {
                    //his royal majesty, the application
					out(indent = 0, trim = true)
					{
						var application = ui.root;
					}
                }

				//recurse
                if (node.children && inspect_children)
				{
					for(var child in node.children)
                    {
						traverse(child, node);
                    }
				}
                
            }
            
			method generate()
            {
                traverse(application, null);
                
                //now we generate the individual items, starting with global variables
                //*note the marker*
                for(var vname in variables)
                {
                    out(indent = 1, marker = "variables")
                    {
                        var <xss:e v="vname"/>;
                    }
                }
                
                //generate ui
                for(var cmp in components)
                {
                    out(indent = 1) 
                    {
                        <xss:file output="inline" src="component.xss">
                            <parameter name="cmp"/>
                        </xss:file>
                    }
				    project.render_instance(cmp, "instance.xss", indent = 2);
                }
                
                //and animation
                for(var seq in sequences)
                {
                    var rendering_class = false;
                    
                    out(indent = 1) 
                    {
                        <xss:e v="seq.id"/> = new <xss:e v="seq.native_class"/>();
                        g_sequences.push(<xss:e v="seq.id"/>);

                        <xss:file output="inline" src="sequence.xss">
                            <parameter name="seq"/>
                            <parameter name="rendering_class"/>
                        </xss:file>
                    }
                }
                
                //render the application last
                compiler.render_instance(application, "instance.xss", 2);
                out()
                {
                    if (application.init)
                    {
                        application.init();
                    }
                }
            }
			</xss:class>
    
			start();
			ui.draw(drawingCanvas.getContext('2d'));
		});
	}
}
</script>

</head>

<body>

	<canvas id="<xss:e value="application.canvasElement"/>" width="<xss:e value="application.width"/>" height="<xss:e value="application.height"/>">

		<p>Your browser doesn't support canvas.</p>

	</canvas>

</body>

</html>