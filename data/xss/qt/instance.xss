<xss:code>
	  if(cmp.properties)
	  {
		    for(var p in cmp.properties)
		    {
			      if(p.set || p.get)
			      {
				        compiler.log(p.type);

				        // bellow 'if' is to avoid xkp::type_mismatch in base.h
				        string prop_type = "prop_type";
				        if(p.type)
					          prop_type = p.type;

				        string set_prop_name = p.name + "_set(" + prop_type + " value)";
				        string get_prop_name = p.name + "_get(void)";

				        string var_name = p.name + "_";
				        string var_decl = prop_type + " " + var_name;
				        priv_vars += var_decl;

				        // generate method for set value to property
				        out(indent = 0)
				        {
					          void <xss:e value="main_class"/>::<xss:e value="set_prop_name"/>
					          <xss:open_brace/>
						            <xss:e value="var_name"/> = value;
				        }
				        if(p.set)
				        {
					          out(indent = 1)
					          {
						            <xss:e value="p.set.generate()"/>
					          }
				        }
				        out(indent = 0)
				        {
					          <xss:close_brace/>
					          <xss:return/>
				        }

				        // generate method for get value of property
				        out(indent = 0)
				        {
					          <xss:e value="prop_type"/> <xss:e value="main_class"/>::<xss:e value="get_prop_name"/>
					          <xss:open_brace/>
				        }
				        if(p.get)
				        {
					          out(indent = 1)
					          {
						            <xss:e value="p.get.generate()"/>
					          }
				        }
				        out(indent = 0)
				        {
						            return <xss:e value="var_name"/>;
					          <xss:close_brace/>
					          <xss:return/>
				        }

				        set_prop_name = "void " + set_prop_name;
				        get_prop_name = prop_type + " " + get_prop_name;

				        // push methods of properties in array for include in class declaration
				        methods += set_prop_name;
				        methods += get_prop_name;
			      }
			      else
			      {
				        // do nothing in C/C++
			      }
		    }
	  } // if(cmp.properties)

	  if(cmp.events)
	  {
		    for(var e in cmp.events)
		    {
			      if(!e.implemented)
				        continue;

			      string evt_name = "on_" + cmp.id + "_" + e.qt_name + "()";

			      out(indent = 0)
			      {
				        void <xss:e value="main_class"/>::<xss:e value="evt_name"/>
				        <xss:open_brace/>
			      }

            for(var impl in e.impls)
			      {
				        out(indent = 1)
				        {
					          <xss:e value="impl.generate_code()"/>
				        }
			      }

			      out(indent = 0)
			      {
				        <xss:close_brace/>
				        <xss:return/>
			      }

			      evt_name = "void " + evt_name;

			      // push event in array for include in class declaration
			      methods += evt_name;
		    }
	  } // if(cmp.events)

	  if(cmp.methods)
	  {
		    for(var m in cmp.methods)
		    {
			      //compiler.log(m.return_type);

			      string mthd_name = m.name + "(" + m.args.generate() + ")";

			      out(indent = 0)
			      {
				        void <xss:e value="main_class"/>::<xss:e value="mthd_name"/>
				        <xss:open_brace/>
					          <xss:e value="m.generate()"/>
				        <xss:close_brace/>
				        <xss:return/>
			      }

			      // with this, it's necesary to know the returned type of method
			      //if(m.return_type)
			      //    mthd_name = m.return_type + " " + mthd_name;
			      //else
			      mthd_name = "void " + mthd_name;

			      // push method in array for include in class declaration
			      methods += mthd_name;
		    }
	  } // if(cmp.methods)
</xss:code>
