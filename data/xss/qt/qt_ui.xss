<?xml version="1.0" encoding="UTF-8"?>
<ui version="4.0">
    <author>Generated by XSS. XKP 2011. E. Santos.</author>
    <class><xss:e value="main_class"/></class>

<xss:class entry_point="generate_ui">
    method generate_properties(var cmp, int ind)
    {
        for(var p in cmp.properties)
  	    {
			//compiler.log(cmp.id + " " + p.name);
			
            // if i do this, type mismatch error is dispatched
            // the error is produced in vm.cpp on 'case i_binary_operator:'
            // when execute the line: 'variant        result = e->exec(arg1, arg2);'
            //string p_value = p.value;
            //if(p_value == "null")
            //    continue;

            var prop_value = compiler.evaluate_property(cmp, p.name);

			var prop = cmp.find_property(p.name);
			var pvalue = prop.generate_value();
			
			compiler.log(cmp.id + "." + p.name + " ##/> 1=" + prop_value + ", 2=" + pvalue);
			//compiler.log("- " + p.value + " : " + prop.value);
			
            string prop_type = p.type;
            string prop_name = p.name;

            // don't generate property w.h.i.t.h.o.u.t. assign value
			//if((!p.qt_ui) || (!prop_value))
			if(p.qt_ui == false)
			{
				if(p.default_value)
				{
					p.value = p.default_value;
				}
				
				continue;
			}
            
            if(prop_type == "int")
                prop_type = "number";
            
            // translate property name if it not coincided with qt_name
            if(p.qt_name)
                prop_name = p.qt_name;
			
			//compiler.log("before custom_type: " + cmp.id + "." + p.name);
			//compiler.log(p.custom_type);
			
			if(p.custom_type)
			{
				compiler.log("inside if");
				//var prop = cmp.find_property(p.name);
				prop_value = prop.generate_value();
				compiler.log(p.name + " " + prop_value);
			}
            
            out(indent = ind)
            {
                <property name="<xss:e value="prop_name"/>">
                    <<xss:e value="prop_type"/>><xss:e value="prop_value"/></<xss:e value="prop_type"/>>
                </property>
            }
        }
    }
    
	// this recursive method is for generate all components, 
	// inclusively containers components with childs
	method generate_component(var cmp, var parent, int ind)
	{
		if(!cmp.qt_ui)
			return;

		out(indent = ind)
		{
			<widget class="<xss:e value="cmp.tag_name"/>" name="<xss:e value="cmp.id"/>">
				<property name="geometry">
					<rect>
						<x><xss:e value="cmp.x"/></x>
						<y><xss:e value="cmp.y"/></y>
						<width><xss:e value="cmp.width"/></width>
						<height><xss:e value="cmp.height"/></height>
					</rect>
				</property>
		}

		generate_properties(cmp, ind);

		// generate all childrens recursively
		if(cmp.children)
		{
			for(var child in cmp.children)
				generate_component(child, cmp, ind + 1);
		}

		out(indent = ind)
		{
			</widget>
		}
	}

	method generate_ui()
	{
		generate_component(application, null, 1);
	}
</xss:class>

    <layoutdefault spacing="3" margin="5"/>
    <resources/>
    <connections/>
</ui>
