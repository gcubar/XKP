// 
// Test example
//
<xss:class entry_point="generate_test">
	
    method generate_properties(var cmp, int ind)
    {
        for(var p in cmp.properties)
  	    {
			if(!p.qt_ui)
				continue;
				
			var prop_value = compiler.evaluate_property(cmp, p.name); 
			var prop = cmp.find_property(p.name);
			string p_value = prop.generate_value();
		
			//compiler.log(cmp.id + "." + p.name + " = " + p.value + " = " + prop.value + " = " + prop_value + " = " + p_value);
			//compiler.log(cmp.id + "." + p.name + " = " + p_value + " " + prop_value);
			
			if(!p.value && p.default_value)
			{
				prop.value = p.default_value;
				p_value = prop.generate_value();
			}
			
			out()
			{
				<xss:e v="cmp.id"/>.<xss:e v="p.name"/> = <xss:e v="prop.generate_value()"/> or = <xss:e v="p_value"/>;
			}
        }

		for(var mthd in cmp.methods)
		{
			out()
			{
				<xss:e v="mthd.code.generate()"/>
			}
		}
    }
    
	method generate_component(var cmp, var parent, int ind)
	{
		if(!cmp.qt_ui)
			return;

		generate_properties(cmp, ind);

		// generate all childrens recursively
		if(cmp.children)
		{
			for(var child in cmp.children)
				generate_component(child, cmp, ind + 1);
		}
	}

	method generate_test()
	{
		generate_component(application, null, 1);
	}

</xss:class>
