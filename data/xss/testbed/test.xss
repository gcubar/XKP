// 
// Test example
//
<xss:code>
	int varToChange = 2;

	out()
	{
		<xss:file output="testbed.xml" src="testbed.xss">
			<parameter name="varToChange" access="read_write"/>
		</xss:file>
	}
</xss:code>

<xss:class entry_point="generate_test">
	
    method generate_properties(var cmp, int ind)
    {
        for(var p in cmp.properties)
  	    {
			if(!p.qt_ui)
				continue;
				
			//var prop_value = compiler.evaluate_property(cmp, p.name); 
			//var prop = cmp.find_property(p.name);
			//string p_value = prop.generate_value();
		
			if(!p.value && p.default_value)
			{
				//prop.value = p.default_value;
				//p_value = prop.generate_value();
			}
			
        }

		for(var mthd in cmp.methods)
		{
			out()
			{
				<xss:e v="mthd.code.generate()"/>
			}
		}

		for(var evt in cmp.events)
		{
			for(var impl in evt.impls)
			{
				out(indent = 1)
				{
					<xss:e value="impl.generate()"/>
				}
			}
		}
    }
    
	method generate_component(var cmp, var parent, int ind)
	{
		if(!cmp.qt_ui)
			return;

		generate_properties(cmp, ind);

		// generate all childrens recursively
		if(cmp.children)
		{
			for(var child in cmp.children)
				generate_component(child, cmp, ind + 1);
		}
	}

	method generate_test()
	{
		generate_component(application, null, 1);
	}

</xss:class>
