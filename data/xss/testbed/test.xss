// 
// Test example
//
<xss:class entry_point="generate_test">
	
    method generate_properties(var cmp, int ind)
    {
        for(var p in cmp.properties)
  	    {
            // this dispatch error
			string p_value = p.value as string; //works
   			
            // and this equal
            //string p_value = p.value;
            if(p_value == null) //why compare to "null"?
				continue;

			// this make assert error
			// evaluate_property takes a string as second parameter	
			var plt = compiler.evaluate_property(cmp, "placement"); 
			
            // this dispatch error with the word between quotes
            // don't generate property <<"without">>        <-- mysterious word
			// if((!p.qt_ui) || (!prop_value))
			if (p.qt_ui == false)
			{
			}
        }

		for(var mthd in cmp.methods)
		{
			out()
			{
				<xss:e v="mthd.code.generate()"/>
			}
		}
    }
    
	method generate_component(var cmp, var parent, int ind)
	{
		if(!cmp.qt_ui)
			return;

		generate_properties(cmp, ind);

		// generate all childrens recursively
		if(cmp.children)
		{
			for(var child in cmp.children)
				generate_component(child, cmp, ind + 1);
		}
	}

	method generate_test()
	{
		generate_component(application, null, 1);
	}

</xss:class>
